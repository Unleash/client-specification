{
  "name": "17-dependent-features",
  "state": {
    "version": 1,
    "features": [
      {
        "name": "parent.enabled",
        "description": "Parent feature that is always enabled",
        "enabled": true,
        "strategies": [{
          "name": "default"
        }]
      },
      {
        "name": "parent.disabled",
        "description": "Parent feature that is always disabled",
        "enabled": false,
        "strategies": [{
          "name": "default"
        }]
      },
      {
        "name": "parent.with.variant",
        "description": "Parent feature with variant",
        "enabled": true,
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "variants": [
              {
                "name": "parent.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "parent.with.constraint",
        "description": "Parent feature with constraint",
        "enabled": true,
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "constraints": [
              {
                "contextName": "environment",
                "operator": "IN",
                "values": ["prod"]

              }
            ],
            "variants": [
              {
                "name": "parent.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "child.with.matching.constraint",
        "description": "Child with parent matching constraint",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.constraint"
        }],
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "constraints": [
              {
                "contextName": "environment",
                "operator": "IN",
                "values": ["prod"]

              }
            ],
            "variants": [
              {
                "name": "child.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "child.with.non.matching.constraint",
        "description": "Child with parent not matching constraint",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.constraint"
        }],
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "constraints": [
              {
                "contextName": "environment",
                "operator": "IN",
                "values": ["dev"]

              }
            ],
            "variants": [
              {
                "name": "child.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "parent.with.cycle",
        "description": "Parent with cycle to child",
        "enabled": true,
        "dependencies": [{
          "feature": "child.with.cycle"
        }],
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "variants": [
              {
                "name": "parent.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "child.with.cycle",
        "description": "Child with cycle to parent",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.cycle"
        }],
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "variants": [
              {
                "name": "parent.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "child.with.transitive.dependency",
        "description": "Child with transitive dependency",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.enabled.child.enabled"
        }],
        "strategies": [
          {
            "name": "flexibleRollout",
            "parameters": {
              "rollout": "100",
              "stickiness": "default",
              "groupId": "parent"
            },
            "variants": [
              {
                "name": "parent.variant",
                "weight": 1,
                "payload": {
                  "type": "string",
                  "value": "variantValue"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "parent.enabled.child.enabled",
        "description": "Parent enabled, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.enabled"
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.enabled.child.disabled",
        "description": "Parent enabled, child disabled",
        "enabled": false,
        "dependencies": [{
          "feature": "parent.enabled"
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.disabled.child.enabled",
        "description": "Parent disabled, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.disabled"
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.disabled.child.disabled",
        "description": "Parent disabled, child disabled",
        "enabled": false,
        "dependencies": [{
          "feature": "parent.disabled"
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.default.variant.child.enabled",
        "description": "Parent enabled with no explicit variant, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.enabled",
          "variants": ["disabled"]
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.disabled.satisfied.child.enabled",
        "description": "Parent disabled expectation satisfied, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.disabled",
          "enabled": false
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.disabled.not.satisfied.child.enabled",
        "description": "Parent disabled expectation not satisfied, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.enabled",
          "enabled": false
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.single.variant.child.enabled",
        "description": "Parent single variant match, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.variant",
          "variants": ["parent.variant"]
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.multiple.variants.child.enabled",
        "description": "Parent multiples variants match, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.variant",
          "variants": ["parent.variant", "nonmatching.variant"]
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.empty.variants.child.enabled",
        "description": "Parent empty variants match, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.variant",
          "variants": []
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parent.non.matching.variant.child.enabled",
        "description": "Parent non matching variant, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.with.variant",
          "variants": ["nonmatching.variant"]
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "multiple.parents.satisfied.child.enabled",
        "description": "Multiple parents satisfied, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.enabled"
        }, {
          "feature": "parent.disabled",
          "enabled": false
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "multiple.parents.not.satisfied.child.enabled",
        "description": "Multiple parents not satisfied, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.enabled"
        }, {
          "feature": "parent.disabled"
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      },
      {
        "name": "parents.not.exist.child.enabled",
        "description": "Parent does not exist, child enabled",
        "enabled": true,
        "dependencies": [{
          "feature": "parent.not.exist"
        }],
        "strategies": [{
          "name": "flexibleRollout",
          "parameters": {
            "rollout": "100",
            "stickiness": "default",
            "groupId": "groupId"
          },
          "variants": [
            {
              "name": "child.variant",
              "weight": 1,
              "payload": {
                "type": "string",
                "value": "variantValue"
              }
            }
          ]
        }]
      }
    ]
  },
  "tests": [
    {
      "description": "Child is enabled when parent is enabled and child itself is enabled",
      "context": {},
      "toggleName": "parent.enabled.child.enabled",
      "expectedResult": true
    },{
      "description": "Child is disabled when parent is enabled but child itself is disabled",
      "context": {},
      "toggleName": "parent.enabled.child.disabled",
      "expectedResult": false
    },
    {
      "description": "Child is disabled when parent is disabled and ahd child itself is enabled",
      "context": {},
      "toggleName": "parent.disabled.child.enabled",
      "expectedResult": false
    },
    {
      "description": "Child is disabled when parent is disabled and child itself is disabled",
      "context": {},
      "toggleName": "parent.disabled.child.disabled",
      "expectedResult": false
    },
    {
      "description": "Child is enabled when parent is expected to be disabled and actually is disabled",
      "context": {},
      "toggleName": "parent.disabled.satisfied.child.enabled",
      "expectedResult": true
    },
    {
      "description": "Child is disabled when parent is expected to be disabled and actually is enabled",
      "context": {},
      "toggleName": "parent.disabled.not.satisfied.child.enabled",
      "expectedResult": false
    },
    {
      "description": "Child is enabled when parent matches a single variant",
      "context": {},
      "toggleName": "parent.single.variant.child.enabled",
      "expectedResult": true
    },
    {
      "description": "Child is enabled when parent matches one of multiple variants",
      "context": {},
      "toggleName": "parent.multiple.variants.child.enabled",
      "expectedResult": true
    },
    {
      "description": "Child is enabled when parent is enabled and variants dependency is empty",
      "context": {},
      "toggleName": "parent.empty.variants.child.enabled",
      "expectedResult": true
    },
    {
      "description": "Child is disabled when parent is enabled but the explicit variant does not match",
      "context": {},
      "toggleName": "parent.non.matching.variant.child.enabled",
      "expectedResult": false
    },
    {
      "description": "Child is enabled when multiple parents are enabled",
      "context": {},
      "toggleName": "multiple.parents.satisfied.child.enabled",
      "expectedResult": true
    },
    {
      "description": "Child is disabled if at least one parent is disabled",
      "context": {},
      "toggleName": "multiple.parents.not.satisfied.child.enabled",
      "expectedResult": false
    },
    {
      "description": "Child is disabled when parent does not exist",
      "context": {},
      "toggleName": "parents.not.exist.child.enabled",
      "expectedResult": false
    },
    {
      "description": "Child is disabled when cyclic dependency to parent exists",
      "context": {},
      "toggleName": "child.with.cycle",
      "expectedResult": false
    },
    {
      "description": "Child is disabled when transitive dependency exists",
      "context": {},
      "toggleName": "child.with.transitive.dependency",
      "expectedResult": false
    },
    {
      "description": "Child is enabled with parent enabled by passing child context",
      "context": {
        "environment": "prod"
      },
      "toggleName": "child.with.matching.constraint",
      "expectedResult": true
    },
    {
      "description": "Child is disabled with parent disabled by passing child context",
      "context": {
        "environment": "dev"
      },
      "toggleName": "child.with.non.matching.constraint",
      "expectedResult": false
    },
    {
      "description": "Child is enabled with parent default variant satisfied",
      "context": {},
      "toggleName": "parent.default.variant.child.enabled",
      "expectedResult": true
    }
  ],
  "variantTests": [
    {
      "description": "Child returns variant when parent is enabled and child itself is enabled",
      "context": {},
      "toggleName": "parent.enabled.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },{
      "description": "Child returns disabled variant when parent is enabled but child itself is disabled",
      "context": {},
      "toggleName": "parent.enabled.child.disabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns disabled variant when parent is disabled and ahd child itself is enabled",
      "context": {},
      "toggleName": "parent.disabled.child.enabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns disabled variant when parent is disabled and child itself is disabled",
      "context": {},
      "toggleName": "parent.disabled.child.disabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns variant when parent is expected to be disabled and actually is disabled",
      "context": {},
      "toggleName": "parent.disabled.satisfied.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },
    {
      "description": "Child return disabled variant when parent is expected to be disabled and actually is enabled",
      "context": {},
      "toggleName": "parent.disabled.not.satisfied.child.enabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns variant when parent matches a single variant",
      "context": {},
      "toggleName": "parent.single.variant.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },
    {
      "description": "Child returns variant when parent matches one of multiple variants",
      "context": {},
      "toggleName": "parent.multiple.variants.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },
    {
      "description": "Child return variant when parent is enabled and variants dependency is empty",
      "context": {},
      "toggleName": "parent.empty.variants.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },
    {
      "description": "Child returns disabled variant when parent is enabled but the explicit variant does not match",
      "context": {},
      "toggleName": "parent.non.matching.variant.child.enabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child return variant when multiple parents are enabled",
      "context": {},
      "toggleName": "multiple.parents.satisfied.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },
    {
      "description": "Child returns disabled variant if at least one parent is disabled",
      "context": {},
      "toggleName": "multiple.parents.not.satisfied.child.enabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns disabled variant when parent does not exist",
      "context": {},
      "toggleName": "parents.not.exist.child.enabled",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns disabled variant when cyclic dependency to parent exists",
      "context": {},
      "toggleName": "child.with.cycle",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns disabled variant when transitive dependency exists",
      "context": {},
      "toggleName": "child.with.transitive.dependency",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns variant with parent enabled by passing child context",
      "context": {
        "environment": "prod"
      },
      "toggleName": "child.with.matching.constraint",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    },
    {
      "description": "Child returns disabled variant with parent disabled by passing child context",
      "context": {
        "environment": "dev"
      },
      "toggleName": "child.with.non.matching.constraint",
      "expectedResult": {
        "name": "disabled",
        "enabled": false
      }
    },
    {
      "description": "Child returns variant with parent default variant satisfied",
      "context": {},
      "toggleName": "parent.default.variant.child.enabled",
      "expectedResult": {
        "name": "child.variant",
        "payload": {
          "type": "string",
          "value": "variantValue"
        },
        "enabled": true
      }
    }
  ]
}





